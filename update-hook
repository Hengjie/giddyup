#!/bin/sh

# Automatically deploy a web application by pushing updates to a git
# repository.
#
# For information on usage of this hook, please see the README.md that came
# with your installation of giddyup.
# 

set -e

run_hook() {
	local hook="$1"
	
	if [ -d "${RELEASE}/${HOOKDIR}/${hook}" ]; then
		for f in "${RELEASE}/${HOOKDIR}/${hook}/"*; do
			exec_hook_file "$f"
		done
	else
		exec_hook_file "${RELEASE}/${HOOKDIR}/${hook}"
	fi
}

exec_hook_file() {
	local hook_file="$1"

	if [ "${AUTOCHMODHOOKS}" = "true" ]; then
		chmod +x $hook_file
	fi

	if [ -x "$hook_file" ]; then
		env - PATH="${PATH}"	 		\
		      APP_ENV="${APP_ENV}"		\
		      ROOT="${ROOT}"			\
		      RELEASE="${RELEASE}"		\
		      NEWREV="${NEWREV}"		\
		      OLDREV="${OLDREV}"		\
		      "$hook_file"
	else
		cat <<EOF >&2
WARNING: file $hook_file does not have executable permissions.
You may want to enable giddyup.autochmodhooks.
EOF
	fi
}

get_config() {
	local option="$1"
	
	git config --get giddyup.${option} || true
}

if [ "$(get_config debug)" = "true" ]; then
	set -x
fi

APP_ENV="$(get_config environment)"

AUTOCHMODHOOKS="$(get_config autochmodhooks)"
ALLOW_OTHER_BRANCHES="$(get_config allowotherbranches)"

HOOKDIR="$(get_config hookdir)"
HOOKDIR="${HOOKDIR:-config/hooks}"

KEEP_RELEASES="$(get_config keepreleases)"

REPO="$(dirname $(cd $(dirname "$0"); pwd -P))"
ROOT="$(dirname "${REPO}")"
trap "rm -rf ${SCRATCH_REPO}" EXIT

REF="$1"
OLDREV="$2"
NEWREV="$3"

if [ "$REF" != "refs/heads/master" && "${ALLOW_OTHER_BRANCHES}" = "true" ]; then
	echo "NOTE: Only master branch gets deployed." >&2
	exit 0
elif [ "$REF" != "refs/heads/master" ]; then
    echo "ERROR: Can only push to master" >&2
	exit 69
fi

RELEASE_DATE="$(date +%Y%m%d-%H%M%S)"
RELEASE="${ROOT}/releases/${RELEASE_DATE}"

mkdir -p "${ROOT}/shared"
mkdir -p "${RELEASE}"

cd "${RELEASE}"

git --git-dir "${REPO}" archive --format=tar "${NEWREV}" | tar xf -

cd "${ROOT}"

run_hook stop

rm -f current
ln -s "${ROOT}/releases/${RELEASE_DATE}" current

run_hook start

# Tidy up old releases
if [ "${KEEP_RELEASES}" != "0" ]; then
	cd "${ROOT}/releases"
	ls | sort -r | tail -n +$((${KEEP_RELEASES:-5}+1)) | xargs rm -rf
fi

cat <<EOF >&2
SUCCESS: Repository was successfully deployed.
EOF
